<#@ template debug="true" hostspecific="true" language="C#"  #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core"#>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ include file="DBSchema.ttinclude"#>
<#@ include file="MultiDocument.ttinclude"#>
<# var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)}; #>
<#
//指定生成的表
	string[] tbs = { 
	"User"
    };

    var dbSchema=DBSchemaFactory.GetDBSchema();
	List<string> tableList=dbSchema.GetTablesList();
	foreach(string tableName in tableList)
	{
		if(Array.IndexOf(tbs,tableName)<=-1)
        {
			continue;
        }

		manager.StartBlock(tableName+".cs");
		Table table=dbSchema.GetTableMetadata(tableName);
#>
//------------------------------------------------------------------------------
//  <auto-generated>
//  此代码由模板自动生成
//  文件名称:<#=tableName#>.cs
//  生成时间: <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by dlm
//  对此文件的更改可能会导致不正确的行为，并且如果
//  重新生成代码，这些更改将会丢失
//  </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq; 
using System.Text;

namespace HuaTang.Main.Model
{
	[Serializable]
	[HuaTang.Framework.Repositories.TableName("<#=tableName#>")]
	[HuaTang.Framework.Repositories.PrimaryKey("<#=table.PrimaryKey#>")]
	public partial class <#=tableName#>
	{
<#
		foreach(Column c in table.Columns)
		{
#>
		///<summary>
		///
		///</summary>	
		public <#=GeneratorHelper.GetQuesMarkByType(c.TypeName)#> <#=c.ColumnName#>{ get; set; }
<#
		}
#>

		///<summary>
		///验证方法
		///</summary>	
		public string Valid()
		{	
			string rst="";
<#
		foreach(Column c in table.Columns)
		{
			if(!c.AllowDBNull)
			{
				if(c.TypeName==GeneratorHelper.StringType)
				{
#>
			if (string.IsNullOrEmpty(this.<#=c.ColumnName#>))
			{
				rst="The <#=c.ColumnName#> should not be empty!";
			}
<#
				}
				if(c.TypeName==GeneratorHelper.DateTimeType)
				{
#>
			if (this.<#=c.ColumnName#>==null)
			{
				rst="The <#=c.ColumnName#> should not be empty!";
			}
<#
				}
			}
			if(c.TypeName==GeneratorHelper.StringType)
			{
#>
			if (this.<#=c.ColumnName#> != null && <#=c.MaxLength#> < this.<#=c.ColumnName#>.Length)
			{
				rst="The length of <#=c.ColumnName#> should not be greater then <#=c.MaxLength#>!";
			}
<#
			}
		}
#>
			return rst;
		}	
		//#endregion
	}
}
<#
		manager.EndBlock();
	}
	dbSchema.Dispose();

	manager.Process(true);
#>